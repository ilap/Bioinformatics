__author__ = 'ilap'

from random import randint
from collections import Counter
import numpy as np
import random

import time

import time

def timing(f):
    def wrap(*args):
        time1 = time.time()
        ret = f(*args)
        time2 = time.time()
        print '%s function took %0.3f ms' % (f.func_name, (time2-time1)*1000.0)
        return ret
    return wrap


def laplaceProfileMatrix (matrix):
    val = sum (matrix[:,0])+4
    return (matrix+1.0)/val

def profileMatrix (matrix):
    return matrix/10.

def countMatrix (motifs):
    col_len = len (motifs)
    row_len = len (motifs[0])

    count_matrix = [[0]*row_len]*4
    matrix = []
    for row in motifs:
        matrix.append([str (x) for x in row])

    nmatrix = np.array(matrix)
    cmatrix = np.array(count_matrix)

    for col_idx in range(0, row_len):
        col = nmatrix[:, col_idx]
        #print "COL", col
        counter = Counter (col.tolist())
        cmatrix[0, col_idx] = counter['A']
        cmatrix[1, col_idx] = counter['C']
        cmatrix[2, col_idx] = counter['G']
        cmatrix[3, col_idx] = counter['T']


    return cmatrix


def probability (kmer, profile_matrix):
    N = ["A", "C", "G", "T"]

    klen = len (kmer)


    idx = N.index(kmer[0])
    result = profile_matrix[idx,0]

    for i in range (1, klen):
        idx =  N.index(kmer[i])
        val = profile_matrix[idx,i]

        #if val != 0.0:
        result *= val

    return result
'''
Profile-most Probable k-mer Problem: Find a Profile-most probable k-mer in a string.
     Input: A string Text, an integer k, and a 4 x k matrix Profile.
     Output: A Profile-most probable k-mer in Text.

'''
def findMostProbableKmer (kmer, k, profile_matrix):
    result = ""

    klen = len (kmer)

    max = -1.
    for i in range (0, klen - k + 1):
        skmer = kmer[i:i+k]
        pr = probability(skmer, profile_matrix)
        if pr > max:
            max = pr
            result = skmer
        #print "FM", skmer, pr

    #print kmer
    return result

def getMotifs (profile, dnas):
    results = []


    klen = len (profile[0])

    for dna in dnas:
        skmer = ""
        max = -1
        dlen = len (dna)

        for i in range (0, dlen - klen + 1):
            kmer = dna[i:i+klen]
            pr = probability(kmer, profile)
            if pr > max:
                max = pr
                skmer = kmer
        results.append (skmer)

    return results

def scoreMatrix (motifs):
    result = 0

    col_len = len (motifs)
    row_len = len (motifs[0])

    matrix = []
    for row in motifs:
        matrix.append([str (x) for x in row])

    nmatrix = np.array(matrix)

    for col_idx in range (0, row_len):
        col = nmatrix[:, col_idx]
        counter = Counter (col.tolist())
        (N, maxv) = counter.most_common()[0]
        #print "MAX", maxv, col_len

        result += col_len - maxv


    return result

'''
nput: Integers k and t, followed by a collection of strings Dna.
     Output: A collection BestMotifs resulting from running RANDOMIZEDMOTIFSEARCH(Dna, k, t) 1,000
     times. Remember to use pseudocounts!
'''

@timing
def randomizedMotifSearch (dnas, k, t, times):

    dlen = len(dnas[0])
    alen = len (dnas)
    #print "DLEN", dlen, alen

    NS = []
    motifs = []
    for dna in dnas:
        N = randint(0, dlen - k)
        motifs.append(dna[N:N+k])
        NS.append(N)
    #print "RANDS", NS

    best_motifs = motifs[:]

    for i in range (0, times):
        while True:
            profile = laplaceProfileMatrix(countMatrix(motifs))
            #print "#1", motifs
            motifs = getMotifs(profile, dnas)
            #print "#2", motifs

            ms = scoreMatrix (motifs)
            bs = scoreMatrix (best_motifs)
            if ms < bs:
                #print "BS, NS",i, ms, bs
                best_motifs = motifs[:]
            else:
                break

        NS = []
        #del motifs[:]
        motifs = []
        for dna in dnas:
            N = randint(0, dlen - k)
            motifs.append(dna[N:N+k])
            NS.append(N)
        #print "RANDS", NS
    return best_motifs

def getRandom (t):
    return 2

# @timing
def gibbsSampler (dnas, k, t, times):

    dlen = len(dnas[0])

    motifs = []
    for dna in dnas:
        N = randint(0, dlen - k)
        motifs.append(dna[N:N+k])

    '''motifs.append(dnas[0][6:6+k])
    motifs.append(dnas[1][3:3+k])

    motifs.append(dnas[2][0:0+k])

    motifs.append(dnas[3][1:1+k])
    motifs.append(dnas[4][6:6+k])

    print motifs
    '''
    best_motifs = motifs[:]

    bs = 0
    si = 0
    for j in range (0, times):


        i = randint (0, t-1)
        #print j, i

        tmotif = motifs[i]
        tms = motifs[:]
        tms.remove(tmotif)
        cm = countMatrix(tms)
        profile = laplaceProfileMatrix(cm)
        mkmer = findMostProbableKmer(dnas[i], k, profile)

        tms.insert(i, mkmer)
        #print dnas[i]
        #print cm
        #print profile
        #print mkmer
        #print "################################"
        motifs= tms[:]

        ms = scoreMatrix (motifs)
        bs = scoreMatrix (best_motifs)
        if ms < bs:
            #print "BS, NS",i, ms, bs
            best_motifs = motifs[:]
            bs = ms
            si = i
        #if scoreMatrix(motifs) < scoreMatrix(best_motifs):
        #    best_motifs = motifs[:]

    print "best score: ", bs, "at: ", i
    return best_motifs

### #### Main

k = 15
t = 20
N = 200
T='''ATGGTCGTTTGGTGGGCGACCAACGGTAAGACACCCAGTGAATTAAGTAATGTCAGGTTGATCACCTAGCAAGGAGTACGTGGTATACGTTACATTTGCGCTAGTTCAAAAGTCCTTGTCTGTACCTATAATTCTCCTCTGCTACGAAGCCCGGAAGGATGGTACTAGGGAAGGTGCACAGTCAGGCACATGGTAGGTAGGCGGTAGGACAGGACTGTCCATCCCAAAATTATGCGGTAGGCGCCACACGTGACTCTAATCAGACTACTAGACATGACGGTAGTATTATGATTCCGGCATATTTAATATGGTCGTTTGGTGG
GCGACCAACGGTAAGACACCCAGTGAATTAAGTAATGTCAGGTTGATCACCTAGCAAGGAGTACGTGGTATACGTTACAAAAAGCATGGATCCATTTGCGCTAGTTCAAAAGTCCTTGTCTGTACCTATAATTCTCCTCTGCTACGAAGCCCGGAAGGATGGTACTAGGGAAGGTGCACAGTCAGGCACATGGTAGGTAGGCGGTAGGACAGGACTGTCCATCCCAAAATTATGCGGTAGGCGCCACACGTGACTCTAATCAGACTACTAGACATGACGGTAGTATTATGATTCCGGCATATTTAATATGGTCGTTTGGTGG
TTCCAGGGGCGCTTTAGACTAGGCCGTCACGGTTCCTGTAGAGTTAAGCTACACGACATTGTCCATTACCGAACAGGTAGGCCCGTAACAGCGTCGATCCCGCACAATGCGTCATGGTAATTTGAGGGTGGATATGGACTACGTGATACTAGTTATAGGGACCTCTTGAGTTACACTTTGCTGTTTAATGCTCGGGAGAGTGCCATATAAATGTCTACGATCCCCCATCCAAGACCGTTGTGGATAAATGCTACCCGGGTGTTGGATGTCAGCCCGTATGCCAGCGGCAATACATCTTGCATTCGTGGTAACCTCCAGGCGC
TAGTTACTAGAAGCTGATAGGGTTAACAGGATGCAGCTTCCCGACTTGCAATTATTTCCAACGGCACCCAACGGCGACCCCAGGCCAGCGACCATCGATTCACTTTGGAGTCTCAGTCCCGTATAGGGATACAAAGGCCTAACGACTCACTATAAAAGCGGGTAAATGTCATTCGTCCGAGAGGATGTCTCTAGGTGATGCGATTGGGCGTAACTAGTGGGAGACCTTCTCCTGGGGAACATTCGAGTGTCACGATCGTAGTCTTGAATCAGGCACGGAACTATCAACATTACGGACCCGGGACGGAACTGTCGCACTACGC
TAGCCTCGCCTTCCGTTACTCGATTTATCTAACCAATAGATCTTCCTTGAATCTCTCGTCCGACTCGCCTTCGTACTGAGTTACCCAAAAATGACTTAGAAACCGCATGGATCCTGCAATACCGAGCCCTATACGTATGTGGGGTCCTGGAACCTCCCTTAAGTTTGAAAATTCTAATGTACATTAATGGTGAGGGACCGGAAAGTCGCAACTTCTTTATGCAAATCTGTTATACGCGATGAGGAGCCGGAGGGGCCGTATCGGTTTCCTGGCCCATCTATGCTAGAGTCGCTCCACTTACTTAAACCACGTAAAACCACGC
GACGACGAAGAGTAGGTCAAGCAGACCCTGGATTTTCTATACTGATAAAGACCACTAAGTCTCTATCAAAAAACTTACTCTTACGTTAGTTACTTAGTCCTCAAACGGTACTTGCAGCCTGACCGGGAATAAAGCCCTAGCAGTCAGCAGGCTGCTTCGAAGCCCAGTATAACAGCGAGACAATGTTCATGGATCCGAACTGGCATCGGTCCATGAGGTACAGACGACTCCTGAATGTGAAAACCAAGATACCCGGTAACTCAGGCAGAAAATTCGAGACACCACCGTGCTCCGTGGCGTTATCGCTTTGACAAACTTTTCC
AAATGTATAGGATCCGCCATAATAGTACATTTGCAATACCATCACGTCTGGGAAAAGAGATGCTCAGAGCATAGTGCGGTAAAATCCCGACTATGGGGGTTCGAATTTATGGCGCATCAAGTCCCATTTGCGCGGACTGAAAGTATTGGGATAGCTCCCGTTACCTCCGGATCGAGATGCGGATTGATATAAGCACGTCAAAGGATGTACCAATGATACGAGATCTGGCTCAGGTCAGGAACGCTCGCGTGCCAGTGACCTTGATTCGAACGAGGGTATTCGTCTACTATGAAGGGCTCGTAATGGACTGCGCCATTGCGAA
GACAGGGCGCAGGCCGTCCAAGCGGCTCGACTAGAACTTTGCCCGCGACTAATTAGCCAAGAAGTATAAGCCTGAGGTTGGGGTGAACAGCCGATGCGGGTGCTGTTCCCGTGCCGGAGGCGGTAGCGGAACGGGGCTTTGTTGAGTCCCGAGGTGACAATTGATTATGCGTCAAATGCGTTGGATCCCCACACTCATGCGTGTGTGTCCTGGAGTAATCATAAAAACCTCTAACACGTCGCCCCGGAGCTGACTACGCAATTACTATCTGCGATCACTGACCACCGCATTTGAGACTCTCATAATCCCTGCTGCCTCGACA
GTAGGTTACGCAAATTATAGATCGACCGCCACAATGTGCCAGACCAGTTAGACGAAAAAATTCGCGCCTGAAGCCGGGTAGAGACTAAAATCCCGAGCGTCAAACTTCTCCCGAAATTGCCATCTAAATGCATTAGCGATCCGGCCTAGAGAATAACGCCTGGACCTAATGTCATGGATAACCGTAGTGCGAGTAGTGCTATGCATACACTTCTATATGCATATAGGAGAAAAGCAAAGTATCCGCAATGTCCAGAACTCCACAGAAGGGGCTAGCGGATTTTCCACTGGGCACCTGCTAGTGTATAACGTTTAACCCCACC
TCTGAAGGCATTGTTAATTTTCCATAGGCTGTACCACAAATCCGATGGATCCCCGAATCTAGAGTCGCCAACCGATAGCTGAAGCCGCATACGCAAGTCAATTACGACACGTCACATTAGGGGAGCCCGTCGTCCCTTCCCACGTTTGAGTACGCCCAGCCCAAGCGGTGTATTACCTTTTCTGCTACACTCCTCCACTTGGGCCGTAATTGCCCAAAGAGCCGGACGGTACTTTCGATATGTGGTGCTAGACGTGAAGACTCATCGCCCGTATGACGAGGAAGGAGTTATGCACGGGAAGCTAGGTTCACGGCAGTGACCA
TGGTACACCGGCCCACTAGAGTCAATAGAAAGCAATCTCCAAGGGATATGACCTACCGTGTAGCGGTCATGGGCTAGGGAATCTATATAACGTTCTAGCCATCGACTCTGCTACACGGCATTATTGAATCTCAGAAGGAATTTCCGTTCAGCACCGCACTATGCTGATCATCCCGTTAAACAGACCGCGCCTAAACATACGTTTTACTAAGTTTTCGTGTTCATATTGGCACTTATCGAGAACGTTAATACAAATACGTTAAGGCCTGGCTCGAGGCGAATGACAGTCAATTCCCATGTCATGGATCTTCGTGCTACCCTTG
AGCTACTTAGCGGTCCGAAGTCTCGATCATAAGTGTGCACGACTATAACCATCGTCATTTTAGTATCCCTGCCAACCAGCCGCATGTTACCAGAGCATGCTAACCCTTAGAGACGTCTCTCACGGGGGGATTTAGCTGGGCCATTCTCATATAAGTCACAGAGGGGGGCCAACTAACAAAACCCTCGTTGGCTCCGCTACCGCATAAAAAACAGTCATTTTTGGGACGACTGGGCTTCCTGACTGGATGAAGGGACACGCAAATGGACAGCCCTCACTACAGTTTTTAGGAATAAACTGAAATGTCATGAGCCCGTTGTTAA
ATGGCGTTATTGTAGGATATTTCTTTTTGTTTTCCTGGTGTCAATGCTATCAGCGGGGGACTTTAAGTTCAGCGCTGTGGCGACATTGAAATGGTTTGGATCCCTGGGTAGTATACCACCAGCACCTGTGGAAGATCTTTCTCTGGCATTTCACGAGTGTGACTTAGCACGTACAGATTGTCTACCTTCAGCTCTCGGCACTAAGTTGCTACCGTCTGGCACTCCAGGACATTCACGTCGTGGACATCGTTATACATTCCCTGGCAGGCTCCCTTACCGTGCATTTTGCAGCCGAGCTTGGCATCACCTTAGTACTTTCGTC
GTACGCCGGGTATGAACTTGGAGTGTCGATTATCCATTCTTTCTTGATGAGAGTTCAACAACCACCGGCGGTCCGTATGAGTAGGGGCCACCACACAATGGACAATCTCCTCCAAGGTACCGCATGGATGACCGCAGGCCCGGGCGTAAGCCACTCTAATTTAGAGCCTTCTTCATTTCCTCCGGGTTCCTGAGGAATATTCCCCTCTCCGGTCTGCACCTTGGGAATTGCAGGTTCATGCCCCCCGTTTGTCATGGATCCGCTGCTCGAAAATTCTCTCAAGAGGATGATAGCTCCGCCTAACGCCAGGAGTCATATGCAA
TAACGGCAGCAAGCCTCGGGCGTAGCGCTAGGCGAGGCATGTTAGGTCGGATGCACCCTAGGGTAGATAGAGTTCCTAACATCCACTCAACAGTTGCTCATACGTGGATTCAAAAATGTCATGGACAGCCAAGGACAAAGAAATTCAAGCAATACTTCACTGTGTCAACTGGTTAAAGATGCATAACACTCCTTACGCCCGTCGAGTCCGTCCATCGCGGGGAGGGGCCCACGTGTTCGGCCTCGTCTGGAACTCCTGGTTAGAGGAGGTAATGGGTAGGTCTTAGAGAGAGGACTCGAGGACAAGCACAGAAAGACTGAAC
GATGAGCCTAAGTCGTCCGCAGGGGAACGGAATCCGATATCAGATTTTTTTATTGTGGATACCGCAGTCGGAATAGGATAACTACCACCAAAAATGTCATGGTGTCCGAGTGTGAGGGAAATCCGAGTTCGTTGTATATCCTAGAGATGGGACATACTCTGACTTGCTTTTTGTGGGGAAAGCCTTAATCGTGTAGCCCATGTATTCGGTCGGGGGAACTGTGATGACTTTTTACGAGCACGTATCCAGATCACAGTGTCACAGGTTTGGGAAACCTCAGACCTAAGACTGATTGTAGCCGAACCAATTATGCCTTACGCCG
TAAATGTCAGCTATCCAGTACAATAAAAAGCTCATCGTAGGCTAAGTAGAGATCCATCTGTTGGGCTCATTAAACCACACGACACTCTAGTCTCATACCGTAGCGTAACCTAAATTTTTCTCCTCCGGTTAATTGAACCAGTGATATGTAGTTACTGAGTTCTAGGCGTTACCTGTTGGTACTAAGTCCGTGATAGTGTTCAGAATAATTATGGGGAGTCTGATGAGGTAAGCAGAACCACAGAACAAGCGTGCGGAGAAGAACCCTCGTGTCCCATAAATAGTCCAGGGTGTTCTCCTCATTGGCGTAGGACAGGTCCTTG
TGCGGACGTCCGCCCTGGTAATACAAATAGTATGGATCCGTCTTAGGGCGCAGTAGTCGGACATTACGCGGCACTATAAAGTTGATGGATATCCCCGGAGCTTTGAATACGTATAGTCTAGAGATCTTCTATAACCCAGTTATCTGTCATGAATAAACTTGCCTGTTCGTTTAGGGATTCGGTAAGACCGAACGAGGAAGTTAACATTTGTGCTCGCCAGGACACTTCGCAGGGGGTGGGCGAAATCCATCTCCCATGGAAGATCGGTTGGCATACCGGTGCGTGTGCTTCGGCATGCACCGAGGATTACCTATTTTCCCAC
GTCGCCGTCTGTCGGCCTGTAGGGTCACTCGGTTATCGTTTGTGTCTGTGTACCGAGCACATAGTTGAACTTATAGCGCCCAAGTCTTACTCATTATGCAGCGAAACTTTCTGCACCCGGCACGGGCAACCATGCAACCACTCTGTAAGTAATCAAGCATGCGGGCACGATTGGTACGCTGTGTCCGGACTCGGCGGTCGTGGCCCCTTCGGATTGAAAATGTTGGGGATCCTTAGAGTGTGGTCGAGTGGACTCTGTTAGAGGGATACCACTAGCCCTGTGAATAATCTCCGCAGGGTAGCTGTTGCCTAGTTTTAATATA
ATGATAATCGTCCGAATCTCTCGCGACCAATCATTGAGTGGTCATGGATCCAAAGGGATATAGCTGGGCGCCACGAAATCGTGCAGCTCTTGACGCATGGTCGTTCGTGACGTCGCATTAAGTACCTACTTGTGTAGAACGGTCAATGCTACTTTTCTATTTAACTCTCTTTCTCCCAATCCTGCTGTAAACTCTGGGTTGATTTCGGTAGGTTAGCAGTCAGTAATAACAGGACTACACCACGCTAGCGAATCTCTCCACGCTCAGTCGTGCATGGCGCATCTGTGGATACCTATCCCCAATATGCGATAGCTTGAACATG
'''


m = T.split()

while True:
    print "####: NEW"
    print ' '.join (gibbsSampler (m, k, t, N))


'''# Testrun
k = 4
t = 5
'''
T='''TTACCTTAAC
GATGTCTGTC
CCGGCGTTAG
CACTAACGAG
CGTCAGAGGT'''
'''
m = T.split()
print ' '.join (gibbsSampler (m, k, t, 20))
'''


k = 15
t = 20

T= '''CCGGGCAATGCTCGGTACTTTACAGCCGAAAGAAGCCTATCAGATACCCAGCGTGGTAGGGATTCGGCCGTCGGAACCCGTGCGCGACTGAACGAAACGCAAGCAAAACATGATACTACACGACAAGCACCTAAATACGTTGGACGGCGCATGCATACGAGGCTGACTGACCTTTCGGGCGGTATCACCACCGGGCAATGCTCGG
TACTTTACAGCCGAAAGAAGCCTATCAGATACCCAGGAGGTCTCAGCCTGTCGTGGTAGGGATTCGGCCGTCGGAACCCGTGCGCGACTGAACGAAACGCAAGCAAAACATGATACTACACGACAAGCACCTAAATACGTTGGACGGCGCATGCATACGAGGCTGACTGACCTTTCGGGCGGTATCACCACCGGGCAATGCTCGG
AAGACTACTTGCTATTTAAACTGGGACATAAGGGGGCCTCCACGCTAGCGTATATAATGCATGAGATAATCAGGAACTGAGCCCCGCCATAGAAGCTACCATTCCTTGCAAAACTCCGCCAGTTCCACTCTTAAACCATCGGGTCATACAAGGCAGTTCAGCCTGTTTTGGTAACTAAGTACAGACCCCTATAGCCGTAACTCCG
ACCACTTCCGTCGAACTTAGTGAATTCATGAACTCCTGTATGTCGATCCATTCGGTGTCGGCTTGGGGTGTCCATGCATCCGATCGCAATTTAACGGTCATCAGGCTGCGTATAATGTACGTTTAGAGTCTACTAGAGCAGCACGCGGCTGTACCCCGAGCGAATAGCCTGTGGACATGTGACAGGATAGGTGCTGTCCGTTAAA
TCCGGAAGAGCACCCTACGCGGGTCGTTGCTTGATACATCATGGTCCATCCTTTCGACTTGTTTATAATGGCAAAGCTCCCGCGCAAGGTCCTGGCGAGGGCCTACCATGCTTTGAGCGTTCGTGCTGTTCGCTGTTCCCCTCCCGGGCAACCTGCGATTGCCCTCGGGAAATCACAGTGAATCTTAGCAAGGGCTGTACAATAG
TCTAGCGAGCGAGGAGCCTGTCGACGGCCGAGCGCTCTGCTCTCCGCCGCGTTCTGACCACCAAAAACCGAGGTCCTCGCGTTGGCCCCTTTGACAAAGCTTCAAACGGGCACTAAGAGGCAGATGATATTCACTGCATCCGGATGATTATTGTCGGTCGTGCAAAGGATACACAACTAATCGGGGAACCAAGTCACCTTAACCT
AGAGACTTCCAGCGAGCCGAGATGCGGCGCCGTCTTCGCAAGGGTCCATTATAGAACCTCCAGAGCGTTACACCTGTGAGTGAAGGAGTTAAAGAGGGCCCGTATTCAAGTATAGTCAGCCATGGGTGTTAGCAGGAATGAACTAGTGCCGGAGTGGTGCGGCCATTTCCAATGGGTGGTGTGATGAAAGCAGTTATCCGTGAGT
TGGACTACCACTAACACTGGCGAAGAAAAGCAAACCTCTGAAGTACACTTAGTAGTAGATAAGATCCACGCCGTACTTAGGACAGGATCCTTTAATGGTTCCGCATACTTTCGGTTTAAGTGGTCGGGAGCGTGAGGCCTGTCGGGACGTAATTTTCGAATCTATAGCGCATTGAGATAGGCTGTTCGGTGAGGAGTGGAGTGCG
CGAGAGGCAGTACTACGTTCAGCCTGTATAAGCTAACTAGATAGAGATGGATCGGTAGTGGAACGCACCCGGCGGGCAGGAGTTTTGAGCTACTATACTCCGGTCAAGATCCCGATCTATAAGAATACCTGAACTGCGCCTATTCGCCTCGCAGTTGAAAGCTTCCAGGTGTAAGCAGCATCGCTATGGTCCTCCCGCTTAATAA
GTTGGATCACAGCCGTAGTAATGCTACTATTCCAATATATTTTTCCCCTAGCAGAACTTCCAGCACGACCCGACATCCCTGATCCGATTCAAGCTAAGTACGAATAATTCGAGCAACCAGCCTGTTGTCTAAACGCCTGCAGTCGCGGCGTCTTGAGAATGATTAGACGAGCAAGAGAGTCCTTTGCCACTTTGGAACTAACGTG
CGGTAGCCAAATATAGGAAAGGCAGCTAGGCACATCCTCGTACCTATTATTGCTCCGCTTGTGCCCAGTAGGCGTGAAGCGATCGTAATGTGCGAGCATCGCCACGTAACACAGCGTTCAGCCTCCAAGGCATAGGTGTCGATCAAACCCTCCGTCGTTTCGCCTAACGAACCGTTTTACGGAAACCTTAATAGAACCACAGTCC
TCAGCATAAGCCGAAACCTTAAACCAACGGCACGGACCGGTGAAGGGCCGGTCGTACAATAAGACGCATCCTAACTATAAGGGCTCCTGACCTAAGGGATAGACTTCCAAGGTTCATCTTACAACCACGATTCGGGGGGAGCGTTCAGCCGCCCAATCACCGGGGGACCTCAAGTTTTTAAACACCGATGCACAAAGGACTACAG
GATCTTTATAATCCTGTTCTACAGCAGCATCATTTACAGACACTCACCAATCAGTGAACCTCGCGTTCAGCCTGCATGTTTAGGATAATTCCCATCCCGGATCGACACCCGAGTGACTTAACGGAGGAACTGCAGGAGATGTCCGAGCATCTTCCATATTCCCTTGTCTCCCCCATGGTGAGTTGGACGTAGTAACACTCCAATC
GAGCCTAGGACTGCAAAGTTTATGAAGATTCTTCTCTATTAGGGATCGGATTTGTTTATATGTATCTCCGATAGCTTGTTGGCGGCGAACGTTTTACTCTTGGGGGGGCCGCTAGGCACTGCAGACTTTCGATCTTATGTGCCCGTTAACGCGGGACACTGCTTACGCATTTACTGAGTCATATATCGAGCGTCATGCCTGTCGT
GATTGCGATACCGATTAGCACAAACATGGCATCTCTTCTAACAAAAAAAGAAGCCGTAATATCCTAGAGCGTTCAGCTGATCATATCGACTAGCTTTTACTTGGGTATCGAAGCGGGACTTCATTGTCGTACATTTCCTTGGTTAGAACGCCGGAAAAAGTTGACGCCATAAAGCGCCTGTAAAGGTGATTGGGTCCGTATGGAA
GCGTCCTCTGGATTGGGTAGCCAGCGTCAAAGGCTCTAAAATTCACAATATTTCGGGGAGATGTTATGGTGCCCTAGGATTCCCCCCGTACTTTCGGGGTCTGGTATCCTGCGGAGACGTTAGCGAGACGCTTCAGCCTGTGAAAGCTTAATACCGGGGCCGGTAGTTTGCGCATTCAGAGACCACGATTCAGGTGGTCGAAAGC
TCTCGCCCAAGAGCAACCTGGCGAAAAAGATTGAGCCGATTGATAGCACACAAGGTAGAGGTCAGTGAGCTGACAGCCTGTGAAACGCTCAAAACACCACAAATTTCATTTCCATCGTTCTAAGATGGGCTGCTCAGATCTCCACCCTCGGCGTTTTCATGCAACCACAAAATATTACATGCACGGCATCTGTAGCAGAATGTTC
CGTCTCTCGATCACAAGTCCGCATTACATATTCTGGGAGACCGCAACACCAAGGTTTGGTCTATCCCGTTACGTCTCGCTAGATTTGAACAAGAAGGTGGCTTTTAAACCTAATTCTGCTGACTACGAAGAGCGTTCAGTACGTAGAGACAAGCCCCCTTGTATCAGGAAAATATAAGGGCAGCCTTCATGGATAGGCACAGACC
AGTGAAAGCGTCGACAAGCATGAGCGATGGGGTGCACGAGCGTTCACTATGTACACTGTGCAGATTCACTTGACGCACGGCTAGGCTGCCGAGATCTGTAATGGTGCAAATAGCAAATCGCACACGTCTCCGGTCATTTTCTCTCTTATGTAGAGGGGTGGTTGAATCCCGCGTAGTCTGAGCTGATGATCTTCTGGGTCCAGGT
TTAGGAGTCCACTGTACTTCCAGGCAATCTCTGTGATAGTGCCTGTGGGGCCATTACGTGCTCCGTTCGCGCGAGCGTGCCGCTCTCACAGGTTCGTGTTGAAGCCAAGCAAAACCGCTACGCGTGGTCATATCAGAGGTATCAGCCTGTATTGCAGCCAATATGCTGATGAGATACTGAGTCGACCGCCGTTGTATTGGCGATC
'''

#m = T.split()
#print m

random.seed ()
#while True:
#    res = randomizedMotifSearch(m, k, t, 250)
#    score = scoreMatrix(res)

#    print "#### NEW"
#    print score
#    print ' '.join (res)

T = "CATGGGGAAAACTGA \
CCTCTCGATCACCGA \
CCTATAGATCACCGA \
CCGATTGATCACCGA \
CCTTGTGCAGACCGA \
CCTTGCCTTCACCGA \
CCTTGTTGCCACCGA \
ACTTGTGATCACCTT \
CCTTGTGATCAATTA \
CCTTGTGATCTGTGA \
CCTTGTGATCACTCC \
AACTGTGATCACCGA \
CCTTAGTATCACCGA \
CCTTGTGAAATCCGA \
CCTTGTCGCCACCGA \
TGTTGTGATCACCGC \
CACCGTGATCACCGA \
CCTTGGTTTCACCGA \
CCTTTGCATCACCGA \
CCTTGTGATTTACGA"

T2 = "TCCCTACCTCCATCA TCCCTACCTCCATCA GCAGCCTATAGATCA ACACTCTAGCGGTCG TAAATATCAGGATTA TCCGTTTCCAATTGA ACCGATTCGCGAGCA TCCAACGATGGATCA AGGCCCTTGTGATCA TCCGCCTTGTGATCT TCCGTCTCGCGATCG TCAATTTTACTAAGA TGCGTATCTCTAGGA TGCGTAGAGCGTGCC GGGCACTCCAGATCA TCCCTTTCATCATTA GCCCTCTAGCGATAG TAAGCCTTGGTTTCA CCGCCCTTTGCATCA ACGGTCGAGGCAGCG"

m = T.split()

#print scoreMatrix(m)

#print scoreMatrix(T2.split())