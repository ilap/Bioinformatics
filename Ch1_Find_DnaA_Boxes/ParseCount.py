__author__ = 'ilap'
import os
import FindOriCLib

'''
dna: ACGTTGCATGTCGCATGATGCATGAGAGCT
pattern: GAG
output:
'''
def parseCount(dna, pat):
    count = 0
    plen = len(pat)
    dlen = len(dna)

    #print "DNA len: ", dlen, dlen - plen + 1, range (0, dlen - plen + 1)
    for i in range (0, dlen - plen + 1):
        #print "i:", i,  pattern, dna[i:i+plen]
        if dna[i:i+plen] == pat:
            #print "2Kmer and K", pattern, dna[i:i+plen]'''
            count += 1
    return count

'''
DNA: ACGTTGCATGTCGCATGATGCATGAGAGCT
FRQ: 4
OUT: CATG GCAT

Text: ACTGACTCCCACCCC
Count:2111211311133--
'''
def frequentWords (dna, k, t = 0):

    length = len (dna) - k + 1

    count = [None]*length

    for i in range (0, length):
        pattern = dna[i:i+k]
        #print "Pattern:", text, pattern
        count[i] = parseCount (dna, pattern)

    if t == 0:
        max_count = max (count)
    else:
        max_count = t
    #print max_count

    freq_patterns = []
    for i in range (0, length - 1):
        tstr = dna[i:i+k]

        if count[i] == max_count and not tstr in freq_patterns:
            freq_patterns.append (tstr)

    freq_patterns.sort ()
    return freq_patterns

'''
input:  "AAAACCCGGT"
output: "ACCGGGTTTT"
'''
def reverseComplement (dna):

    arr=[['A', 'C', 'G', 'T'],['T', 'G', 'C', 'A']]
    dlen = len(dna)

    res = ""
    print "DNA LEN: ", dlen
    for i in range (dlen-1, -1, -1):
        #print "III: ", i
        chr = dna[i:i+1]
        idx = arr[0].index (chr)
        comp_chr = arr[1][idx]
        res += comp_chr
    return res

'''
Pattern Matching Problem: Find all occurrences of a pattern in a string.
Input: Two strings, Pattern and Genome.
Output: All starting positions where Pattern appears as a substring of Genome.
Sample Input:
     ATAT
     GATATATGCATATACTT

Sample Output:
     1 3 9
'''
def findPatternMatch (dna, pat):

    plen = len (pat)
    dlen = len (dna) - plen + 1

    frequencies = []
    for i in range (0, dlen):
        if dna[i:i+plen] == pat:
            frequencies.append (str(i))
    return ' '.join(frequencies)


'''
Clump Finding Problem: Find patterns forming clumps in a string.
     Input: A string Genome, and integers k, L, and t.
     Output: All distinct k-mers forming (L, t)-clumps in Genome.

Sample Input:
     CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA
     5 50 4

Sample Output:
     CGACA GAAGA
'''
def findClumps (dna, k, L, t):
    length = len (dna) - L + 1

    result = []
    for i in range (0, length):
        sub_dna = dna[i:i+L]
        #print "lenght subdna:", i, len (sub_dna)
        # It works but very slow.
        result += frequentWords (sub_dna, k, t)


    return sorted(set(result))


#

# MAIN
#
# Global variables
###########################################################################################
gene_file = 'Salmonella_enterica_genome.txt'
dna = open(gene_file,'rU').read()

dna = open(gene_file,'rU').read()
# pattern = "AAAAACGA"
#dna="AATGTATAACTATACATCGGAATCTTGGAATCGCACAGTACCTCGAGTTCCGTGCTCTAATCTTGAGGTAAACACATTAGTGTCGAAAACCGGGCACCGAGACAGCTTGTGCCACACAATCTGTACCAGACCCAGATCTACATTCTCTCCCAGGTGGACCCAAAAGCGGAAAGTCGTACGTGCAGTAAGGCGTCTCGCGCAATTACCTCAAGAGGCGCCGTCATGTTTCAGACGCAACGATTCGCCCCCACCATGTTTCTTTGCAGGGTGGAGTAGGCGTTTAGAGGTAATGCTCGCGCTCGGACCATTATCGGTACGTCATCGCTGTTGTGTAAACTAGCGTCTCCCACGTACGTTATCCTAAAGGAATCACGATCTCATAACCCCTCCCAAACCCATAGGCACATGCCTCCCCCTAAGAAGGAAGCTTGCAAACACTGTTGGCAGCCACCGGCCCTAGACACACGAGGGATTTGTTTTCTGCATATACCTTCCGCCGCGGCCTTGCCTTATAGCCTCGTGGTGGACGACGACACACAGACGGTGCGGGGAATTTCTTTTTGTTACCACAAGATTGATTTCGGCCGTTCTTCCTCGGCCCACCCTTAAATGTACGTCTTGAAGCCACGGGCAGCTGGGCTTACAAATAAAGCTGATCGAAGGTTGTCATTACAGAAGTTTCCTCTCTTGGACCGATCTCAGCGAATTGCACTCTTACGGCACTTCCCACGGAAAGATAGCAGCTTCCCGCACGGGTGAATAGGGTAGATTAAGCGCGCCTCACACTCTCATGGATCACATAATATCTCAAATTCCGTGTTCGAGGTTCTATAAGCTCAAAGGATTCGACCCATGCCTGTCCCTATACCTAACATACGCACCGACCATATCGATTTAGCCATTTTTCCGACGTTAAGGAGATAGCGCATCGGCGCTTTCAGATGGTACGAATATTCACATCTTAACCGCCCCGTAATAGGGCCAGTTTGGCACATAGCAGAACGGGTGATTGTCTGACGATTAGGAATCTAAGAGCCCCCCTATCCCCCTTTGTGTCGGGACATGACGATCTGGATTTTTTATCACCAGTTCTCTGGGCTATGTTCTCCGATTGGAAACGTCTCCCCTATACTTCGTCAAAATGTACGCCACGTCCTCCCGAAGTAGGTACATGGGCTATCTCTAGTCGCTTCAATGAAGCCCCCGCTTAGTCGGTCCTTTACATATGTACGTTGTAGCGAGCGCCGCACTGGGGCTTTCGCTTGTGTCCAGAATACCGGATCCATTTGAATACTCTTACCGACCGTATACCCGGATAAAGATCAAGAAGCGTGGCTCTGGTAGTTCACTCGGATACACTGAGGAATTTTGCCACCTCCAACCACAGGACCCTCGCTGCTATACCAAATCTAAGGATTGCGTCAACCCCGCGGTAGCTATAGCGCTTCGAAGACTAGAGCACGGAAAGCTAAATCTGAGACAGGTTCTGCTCGCTTAGGTCGTTAATTTGGCAAAACCTGTGCAAAGTGAATCGTTTAATGTGCACTTGATCCGCTAGGGAAGACATGAACCCGCGTGCATTTCCCAGGGGACTGTAAAACGCCATCTGTACGCGTGGCAACATCAGAGGGTCGGTTTTCGAGCGATAAATAGGCGCTTGGCATGAAAGGACTTAGTCATATAACAGTAGCTGCGTCTTAGCCTCGCGGGACCATCCTACCGCCAACAGACCCTAGCAAGGAGCTCTGAGGTTCTGTCACTACGCTAGGTTGCGATGCGTCCCCCGTGCCAAACGATCTTTTGTACTTACCGAGGGTTTTGATTACTTGCAGTTTTCAAAGCTATCTGAGGTCAATGCCAATGTGCGTAAGCAGACTACCAGAAGCACCCTATAGAAACTTGGGAAGAAAGTTGCTAGTGGTGGTGCTCAGTGCTCACCCTTTAAAATACGTCTGGAAGTGGTGCTCAGAGTCAATTGCTGTGGTGCTCATTTTACGCCTTCCTAGCTACCCAGTGAACCGCCCCTGTGGTGCTCACTTACTTCAGTGGTGCTCACTGAGATCGCGGCATAAGTAGTGGCACAGTGAGGCCAAGTGGTGCTCAGGATAGTAACAAAGTATTGGAATTAGGCAGTGGTGCTCACTCAGATGGCGCGTAGATCTGTGGTGGTGCTCATGGTGGTGGTGCTCAAGTTTAAATCTGTGGTGGTGGTGCTCATGCTCACAGTGGTGCTCATGTGGTGCTCATTGCCGCGCCTTTATCAAAGTTGTACATCCCTGTGGTGCTCATCATACCTACCGTGAAACCTTGTGTGGTGGTGGTGCGTGGTGCTCAGACTTGCTTGTGCGGGCTCTCTGAACTGACTGACCAGCGGTGGTGCTCATAGACATCGCCGTCGGTGGCTGGTGGTGCTCAGTGGTGCTCATGACGCGGATCTTGGCCGCCAGTGGTGCTCATGCGTGGTGCTCACACGTTGTGGTGCTCAGTCGAGTGGTGCTCACATCCCTGGTGCCTAAAACACATGAATGATTATACAACCCCCTGTCTCTAATCCTTCTGCGGCTCATCTAAGGGTTAGCCTCACGTTCTCTGATATATAAATGTAACTCTGAATGCGGGAAATAAGGGTCAACACTGCCAGGCGATTGTACGTATCCGCCGGAATGAGAGCTGCAAGAATAACCCAAGTTATTACTGCTGTCTCTCCTTCGGTTTATTGAACCTTAAGTGCGTTCGTACGAACTTGGGGGGCCGGGAATTTTAGGTTACCGGCGGCTGGGAATTTTAGCACCCTGGTAATTATTACGATCGTTAGTTGATATCTCGGAGAACTCGCTCGTCAGTGCAGAATCGAGCTCTGCAGTTACCCGTTATTATTTGGCAAGGAGCAGCCGACGCTGCGTGTATACCATCGTTAGGTAGACCGCTCCCCTTCCGTATTGATTAATGCCAAGACCTGAGGCCTGGAGGCGTTCTCCATATCCGTGTTAGAAGGCAGAATACGCTAAAAGGGCAGGCGCGCCATTCCGTGAGGGATTGGGGGCTGATTAGCGCAACTGTGGTGTAAAACGAAAGCTTATGCCGCGGGCCTATCGACCAACCACCCGATTGTACTTATCGACCGTCCGACCCATAAAAAACCGAGTTATCTCGATCAATGTCAGGCATGACAATGGAAATTCGAAGCTAAACCGGTTTCCTATTGGTGTCATCGATTGAACGCCCATCCACGGGGCGGCCAGTGAGTGTTGATAGTGAGCGGGTAAGTCGGTATCCCTGAGGTTCACATTTGGGATCCTCGAAGCTACCACCATGAGGTTCACGTGCCAAGTTTCCGCATCTCGACAACTGGCTGAATGTAAAGGCCAGTATTGCCCCGTACACGCCTGGCAGTGAGGTTCACACGCCTGGCGTTCACGCAACTGAGGTTCACTGAGGTTCACATGAGGTTCACCACGCCTGGCTCACGCCTGGCCCACGCCTGGCGCTGGCTTGAGGTTCTGAGGTTCCACGCCTGGCGGCCGCTAACACACGCCTGGCCCTGGCCGCCTGGCTTCACCAGGAGATTCATTATGTGAGGTTCCACGCCTGGCCATTGCGTAGCACGCCTGGCGGCACGGAACGCACGCCTGGCGCCTGGCCTGGCTGGCCCTGTTAAATTGAGGTGAGGTTCACTGAGGTTCACGAGATTCGCGCTAAGCGTTAAACTGACACGCCTGGCAGTGAGGTTCACTTCATGAGGTTCACATGTGAGGTTCACTTGAGTGAGGTTCACGCCTGGCCGATTGACACGCCTGGCGGAGTGTGAGGTCACGCCTGGCAATGTGAGGTTCACCACCTCTGAGGTTCACATCCACACGCCTGGCCACGCCTGGCGCAAGATAGGACGACTAAGATTTGTGTCAGTGTGCATTTCTCACGCACGCCTGGCAACCCCTTACCGCACGCCTGGCGTAAGGCACGCCTGGCCTGGCGGTGTTTTAGTGAAGATACCGCCTTAGGTGCCAATCCGCTCGCGAACAACCATGCGGCTGCTGCTCCCCGGCGTAGCTTAGTATAGGTCCCATCTTTTTCATAGGAGATATGCCCCTTATTCTATCACCTCCGCGCGGTGCGCTCCACAGCATGTCTGCCCCCCTCCGTCGCATCCCATATGTTACATAGCACGCCACTTCGAGACAGTACTCGGGGGGATCCGCTTGCTTCTTACAACGAGGTCCCTAGCTCGACGGGTGATTGTCATAGCACACGCGGGATTGACACAGTATTGCAGATGTCGTTCTCTTGCTCGGTTTAAGCCTTCTAAATTTCTTACCACGCACTCAGGCACAAGAGTGTAATTGCTTACCCAGGCATTGTGCGCTGCACCCTCCCGAAGGGACCCCCAACGACAAGCGACATGCACGGCCAGTACGTTTTTTACTGAGGGCCCGGAGTTCCCCCGCGATGCCGACTATTGGCAGTTACTGTCAAAACTCTACGACAAGAAGGTCTTCTTACGATTCTGGGTCTACGCCGTAGAACATTCCGCATGATTCAGCATGAACGTCCTGGGGTACCACACTGCTGTTTGAAAAAGTCCAATCTGAGGGCGGGGACATATTTCGAATGGAAGCGGGGTTTGTGGGCGCCGCGAAGGGGCTTCTATCGCTACCGAAGGAAATTGGGGTAATGATCGTAACTGCTGGAGTGAATTTATAGGTAGCGTGAGGGAGCACCGAGCCCGACGTCCTCTACGTTTTGGCCGTGGTAGTGTTTATCCAGAATGAATGAGCGCGTGCTAGCGGTAAGTCTCTTCGCATCCGGTTGGGTCGGCGTTGGTACAGGGGTCGGCGTTCCTTGACGGCGTAGCTGACCCCAATGGGGTCGGCGTTTCTTCGGTTCCGACCACTTTATCGGTCGGCGTGGTCGGCGTTTTTTGGGGTCGGCGTTTGGGGCGGGCGTAAGTGGTCGGCGTTCCCATGCGGTCGGCGTTACCCCCTATTGGCCACACCTGTAGCACTGGCTAAAGTCCCTTGATGGTCGGCGTTTTAGCCCCACGGCCTACTGGCGGCCCTCAACCCGATCGTTAACAGGTCGGCGTTGTAGTCTGGTCGGCGGTCGGCGTTCGGTCGGCGTTCGGAACAATATCACGGTCGGCGTTGTTGGTCGGCGTTAAATTATTCATAGCGACCTCCAAGTAGGAGGTCGGCGTTGGCGGCCATGCTAGGTCGGCGTTGGGTCGGTCGGCGTTGGCGTTCTTGCTGGTCGGCGGGTCGGCGTTTTGTCTTCAGCACGTCTTTAGCCCTTACCCGAATCGGTCGGCGTTATGGAACGCACTGAGGCGTTGGAGGTCGGCGTTCAGTTGCATACGTAGCGCACTTCCGCCAAACGAGGGTCGGCGTTTCAACGCACTGAAACGCACTGATCAAAGGGCCCGTAACGCACTGACTCCCATATTGGGAACATGGGTAGTAACGCACTGAGGACGGCGAAACCAGGCAGGGTAGCTTAAAAGCTATAGGAGCGTTTGATCTAACGCACTGAGGTGTATGCAACGCACTGACTATCTTTCGGAGTTCACTTTCAAAACGCACTGACACTGAAACTAAGCGAGGCCCTAAACGCACTGATATCGTTTGAAACGCACTGAGAGAAGTCTGAGATAGCCGACTGAACGCACTGAAACAACGCACTGATGCTGGGTGTCAAAGTCTGAGACTGAAAGTCTAACGCACTGATCTAACGCACTGAGACTGAGCCGCAACGAACGCACTGAAACGCACTGAGCACTAACGCACTGAAACGCACTGAGGTTCAAAGTAACGCACTGAAACGCACTGATTCGAACGAACGCACTGAGAAACATGTAAAAAAGTCTGAGAGGTTTGCAAGTCTGAAGTCTAACGCACTGATGAGATTTTGATTATTGGACTGGGTTTAGCTGAGCTCAGCTGTGGCGGGACGGTTTGGTTAAGTCTGAGAATTAAGTCTGAGATTTGACCTGTCTCAAGTCAAAGTTAAGTCTGAGATGAGTGGTTCGGTAAGTCTGAGAGTTTCCGGTGCTTCGAAGTCTGAGAAGTCTGAGAAAGTCTGAGATTCTGACCCACGGGCGAACTACCCGCCTCGCAGCAAGTCTGAACAGGCCTCAACAGGCCTCGCCTCCAGGCCTCAGACGCTCGCCGCGTCTATCTTAGCTAACAGGCCTCGACGTGGAGGTTAAAGAATGAACAAACAGGCCTCTAGACGTGAACAGAACAGGCCTCGCCTCTACACTTTGAACTTAAAGAATGAAAGAATGGACCAAAGAAACAGGCCTCTCAACAGGCCTAACAGGCCTCCCCAAAAAGACCGACCTGAGATGAAGTTCGAAAAAGAAAACAGGCCTCAATGGAGAGTCAAGTGGCCCTTCCCCAAAGAAAACAGGCCTCGGAAACAGGCCTCCCTATAATGCTACGCGGTGATAATCCCGAACAGGCCTCAAAGAATGGACCTTCCAACGTCGATAGAAACAGGCCTCAAGAAAGAAACAGGCCTCCTCATGGACCCTCATTCTAAATAACAGGCCTCGCCTCGAAAACAGGCCTCAGGCCTCCCATTTGCAACAGGCCTCACTAACAGGCCTCGGAAGCTCAAACAACAGGCAAACAGGCCTCAGGCCAACAGGCCTCCAACTGTTAATAATTCCTTAACGGGGCGTGTCATGGAACACACGCTCACTAAAGAATGGATATGGACAAAGAATGGACAAAACCAAAGAATGGATAAAGAATGGACGCAAGAACACTATTGCATTCTACGAATGCCCGTCGGCAATGAAGGGCGTGGCCATGGTCGATTCAGGGTTAAATGGTATATCCCGGGCCTCAATAATCGTACTGCTCTCACTGTCTAGGCCTCTTGTGGACGAGATATGACCTTATTTGGTGTTGACAAAACAACTTTCACGAATTAAACATGGTAGACATTCAACGTCGTGGCATTCAAGGGGACGAGCCTGCTGGATAGATGTGACACGCATTATCTGCGAGCAATCCTGGAATTAGTCCCCGTGTCTAGACTCCCAATGGTGGCATATCCTCCCCATATTAATAGCAAAAAATTGATCGAGATCTATGCGATCCCATGACAGAAGTAAAATTTGAAACTAAAACAAACCACGCCGCTTTCTCGCGGAATCCAAGGGTCTCCTGTAGTGGTGCGAACACGTGGGTTCTGCTGCTCGGGTGGTCATTCTGGCGTCCTTAGATCTGATCCGTTCAAAACCCCAACTCAACCGTTCTGTTGGAGCGGCTGATGTCTAACCGGCATTTACCCTGCCTACTTAGTAAGCGCTACCAGGATTCCTGTAAGGAAAGAGAGTCCGACAGGTATGTGACATCCGACCGACTAAGGGGGTCCCTGAAAGAGGTTGCTCCGCGTGTACTACCGGGGTGTTCAGGGCAAGTCTCAAATGGGAGGCCGTCGTCCGCGTGAACTAAGGCCGGATGACCTGATAGTAGTTGTTGACAAGATGCACGAAAATATCATGAACTGTTGACGGGTCGCGACACGAGAGTCGCGCGCCAAACCATGTTATAAGAAACTAAATGTACTTCCATACACGCTGGCCTCCGATCAAGCATTTCTAGATGTGCAGCTTTCCTACTCGCGCGCCGCCCCTACATTAGCATCTGACGTTACCGATTGTATGAAGTGTGAACGAGCCAAGATCACCGTCCCCGGCAGGGCGGCCGTTAAAGCGATTCAGCATTTCCAAGTTTGGACATTGAACGTAGCTCAGGCGATCAAGACAAAGGCCGGTGGCAAACCTTATCTCACTAGTTCAAGGACGAGACTGATTGCACAGCCCCGTGCCTCTCTCCCCCGCACCAATTCCGGTTGGACACTAAGCACGTTAATCTCTAGCACTCTGCTACAATTATAGCAATCTCACGCCTAGCGCCTTCACGCCTAGTCGCCCAGAAGCTCTCAAGTCAGGAAATTCCTGTCACTGTCACGCCTAGTCACGCCTAGACTCACGCCTAGACGGGTACGTTGGACTAATTCATCCTTGTCACGCCTAGACTCGGCAAACAGTTGATATCACGCCTAGTCACGCCTAGTAGTAGTCGACTGAAAATACAGGCCTTGATGCATGGCCTTGTCTCACGAGAGTATCGGGAAATTACTTGGGAATTTTTTGAGAGAACCTGCCTCTATCGGTAACCTGAACCTGCCTCGCCTCGTCACGCAACCTGCCTCCTCGAACCTGCCTCCCAAGAGTATCGGAACCTGCCTCACTCGCTCACGCCTAGTTCAGAGTATCAAACCTGCCTCGTTAGAGAAACCTGCCTCCGGGACGAACCTGCCTCTGCCTCCGCCTAACCTGCCTCTGCCTCCACAACCTAACCTGCCTCCATCAACCGGCCATGTCCAAGAGAGAGAGTAACCTGCCTCGTATCGGCAGAAACCTGCCTCCAGAGTAAACCTGCCTCGTATCGGGCAGAGTATCGAACCTGCCTCTTTCACAAACCTGCCTCCAGAGAGTATCGGTCCAAGAGAGTATCGGGAAGGCGAAACCTGCCTCAAGAGTATCGGGTATCGGGACGAGAGTATCGGGTAACCTGAACCTGCAAAACCTGCCTCAGAGAGTATCGGGAGTATAACCTGCAACCTGCCTCTAACCTGCCTCCTCAGTCTGAAGAGTATCGGTAGAGTATCGGAGACGTTTCTTGAATTTAGATATCGTGGGGGAAACAACCTGCCTCACAACCTGCCTCACCCTCAATGGATCTCCAATCAATCCGAACATAATCTGCGACGTTTCTTACTCGGGTCATTCGTTGGCGTTGCAAGACGTTTCTTAATAGCATGTTGCGACCCTTGGGCGGACGTTTCTTTGACGTTTCTTTCTTCACTAGCGCGACGTTTCTGACGTTTCTTTTTCTTCAGACGTTTCTTTGAGACGTTTCTTGCATTGAGGCATGGTGACGAATTAGATTCGGAAGGACGTTTCTTTTCTCACAGACGTTTCTTCCTGTTCGAGCTGGCCTTGGAGGACGTTTCTTCGGGACGTTTCTTGACGTTTCTTCGGACGTTTCTTACGTTTCTTCTATGAGCCGAGACGTTTCTTTTTCTTTTTCCCCGACGTTTCTTGATCCCCGCGAGGTTGCGGACTAGCGATTCTTATAAACGTCTATATCAGGAGTGAAGTCGTCGAGTATACTGAATAGGGGGAATATTCTCCTGTTGAAGGGGAGGGCCTGGGGGTTGGATGCTGTGAGATAACTCGCCCATACAAGCTTCCTTTCAATCTTCCGACGGGTTTGCGGGATGCATGATCTAGTAAAGGGATCAGGTTACGTGTATGAGGGAGTAACCGGTACTTAAAAGGTTCTGACCACGGATAGCGGTTGTACCCTTCCCCTTACCACGGATCTCCGATCATGGACACCCCTAACGGTTCAGCTCAACGTTCACAAATGGTGCGTACCATGCAGTTTTCCGGCCGCACAACTGGAAAGCATGGCGGTCACCCGTACTGGTTCGACTTTTGCGCCAGAAGTTATACTCGGAGCTGTGGTAGATATTAGACTAAGCCTTCCTCGCTGAATTAAACCAATTCCTATTTGCTTCATTATGGCAGGCAGACCGATCTCTCCCTGCCAGAAGGCAATTCTAAGTATACACTCCACATTGCTGTTGGCATTAATGCAGGATTGATCATCCATGGGAGGGTGGTTTCTCGAAAGCAGACTAAGTGCCCATGCCCTCAACTGTGAACACACGAAAGTTTATGATATAGTCCGTCTCGCGTCGGGAAAGTCCATTGAGCGGCAATAGCCCGACAGCACTAATGCCAAGTAAAAGGATG"

k=9
L=500
t=3
###########################################################################################


### 1.4

#f=findClumps (dna, k, L, t)
#print ' '.join (f)


#pattern = "GAG"
#kmer = ""
###########################################################################################

### 1.4
#print len (dna)
#print ' '.join(findClumps (dna, 12, 575, 18))

#### 1.3
#print findPatternMatch (dna, pattern)
#comp = reverseComplement ("TTGTGTC")
#print comp
#print findPatternMatch (dna, comp)

# print findPatternMatch ("GATATATGCATATACTT", "ATAT")
print reverseComplement ("GATTACA")

### 1.2
dna="CGTGACAGTGTATGGGCATCTTT"
pattern = "TGT"
#k=5
#t=3 # times
#print ' '.join(frequentWords (dna, k))
print parseCount(dna, pattern)