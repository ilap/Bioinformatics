__author__ = 'ilap'

from SequenceCompareLib import *

def doHalf (r, c, ro, top, bottom, left, right):


    clen = right+1
    max_v = -sys.maxint
    max_idx = -1

    colx = [0]*clen
    coly = [0]*clen
    for j in range (right+1):
        colx[j] = j*-ro

    for i in range (1, bottom+1):

        r_char = r[i-1]
        r_idx = BROW.index(r_char)
        coly[0] = i*-ro

        for j in range (1, right+1):
            c_char = c[j-1]
            c_idx = BCOL.index(c_char)

            downleft = colx[j-1] + BLOSUM[r_idx, c_idx]
            left = colx[j] - ro
            down = coly[j-1] - ro


            coly[j] = max (down, left, downleft)
        tmax = coly[clen-1]
        if max_v < tmax:
            max_v = tmax
            max_idx = i
            #print "MAX", max_v, max_idx
        #print colx
        #print coly
        c3 = colx
        colx = coly
        coly = c3

    return max_idx

def middleNode (r, c, rr, rc, ro, top, bottom, left, right):

    middle = int((right-left)/2)

    print middle

    i_idx =  doHalf(r, c, ro,  top, bottom, left, middle)
    j_idx = middle




    i2_idx = doHalf( rr, rc, ro,  top, bottom, left, middle+1)

    j2_idx = right-middle

    print len (r), len (c)
    print "("+ str(i_idx)+", "+str(j_idx)+") ("+str(i2_idx)+", "+ str(j2_idx) +")"
    #print "SSSSS", right-middle


global BROW
global BCOL
global BLOSUM


(BROW, BCOL, BLOSUM) = generateScoreMatrixFromFile("BLOSUM62.txt")
###########################################

r="PLEASANTLY"
c="MEASNLY"

rj="TWLNSACYGVNFRRLNPMNKTKWDCWTWVPMVMAAQYLCRIFIPVMDHWEFFGDWGLETWRLGIHDHVKIPNFRWSCELHIREHGHHFKTRFLKHNQFTQCYGLMPDPQFHRSYDVACQWEVTMSQGLMRFHRQNQIEKQRDRTSTYCMMTIGPGFTSNGYDPFVTITITPVQEPVENWFTPGGSMGFMIISRYMQMFFYLTRFSDMTYLVGVHCENYVCWNNVAKFLNGNLQGIFDQGERAYHQFVTWHSYSQYSRCSVGRYACEQAMSRVNSKMTWHWPIRDQGHEHFSEQYLSEKRNPPCNPRIGNAGQHFYEIHRIAHRVAMCNWAPQGQHPGGPTPHDVETCLWLWSLCLKGSDRGYVDRPWMFLADQLGEANLTLITMFHGCTRGCLMWFMDWEECVCSYSVVNPRCHGSEQWSVQNLGWRTCDTLISLWEPECDKHNTPPCLHWEFEDHPSQLRPVMMCDKYVQSIPTDAKWAWTYSKDFVISHWLIWTPIKLEECVFPQINRLWGTACNQGSQKIVIQNVWLRPSSFFQERSKCSDSSCILNVGGSNVNITGKETRTHVPILHMHEIDLISTASSGMRHNLILPHGMLMLHMNWHHSTRAMNPYSSLKLIPWTFQVCETDDRDQNVATHVADPCHKGEDQEIRCCKGGVDHQWKGDRMWMMCMPDMNYVKQDQAPSGTCEGACENYPADKDKCYMIFTIVFDYRRCTKKVCIWISGFPVDAFNLISIANAGFFCCWLEPTELKWRRTFYLGKGTQGWMCTFPHRNIIPVIICAGFGRWVQGEVPFRPVAQISAHSSDRRQGHHPPGTNMCHDYGDQYPIKRVGMQVEEDDGASYCDCAADWKLADMYEADHLSIGVIDFTDWIYPKNGGIWSEIIKSHFHWYHWETPQNTVGAFNTIVGINGSDMCIYHGNTQWEFGWCWKWLNHGHMRNQGPCHLGILEGRISKFAQVTSWWWQTKHDKDWSIEPYGRHWGEAGRPYTYNYCWMRWAIVYNHGNVISVELVPFMDEYPGKCNKEDVQFELFSPMQA"
cj="LWFKFLQCIFQYFKDQQETNCIWTFSPFSEHICQRVCQVYWNWNTPSSRTSDPRELFANSTIHNNRCGEWRYMFYHTRTLVQTAPLMKETLHSDGKHSMYCEQRHFFRSSYLIKVNYDVSHYLELYTFSEIPWKLTTHGWDGFSWFLLVNSCCTFDIDGKCGILSQCGMSRAFRTRQEDAYHFQTSLMHLHLHLHVQEGKHEKADLFAQFYNMLPMHGGTCGRNTEPSDLFDSATMNKYMAEHPASCKACPNVSKECFVYWWSHDFTKKHKLIEFSCGRDTGQTTQRTWNVDENEGGKWIWRFHYFMRAKALQIDPKFKPYWNEPRAIMRPGHVTAAPCICAQHSQNETAVCNRDQMHIHAIEFQQYHSRAFGEVQTWCDIGKENENDFIYEQHWWLVGGTEGMAGVIWKFVCARCRTQDCDFWKTCLTYSAQPMMKVYDTIFYVNSINPWEFEDHPSQCDKCVQSIPTDAKYAICGKFVISHWLYWTPQKFEECVHNNVRCAPMGNRLWGTACMVIQNVWLRPSMGSHFSCILNVGGSNINIQGKETWTHVPILHMHEIDLISTASSGMETCKPCFLSGPTIHMGFSYEIRAQPYSRDYFCMDWMQEADEVDHNRCETVQPTLPLLQQFEWKTSCMGQRWITIFCDHCQIVCFSTFFCVMPTFLPNTSILDKFYCIYLSISWTHYCNVHALGFIMRLHYSYMGWKEHKRMHAWDIGLDELWAQEGIQRAQLWCGDEFEVAKYPEWITEARTAIATRPWFHNCYIKPWWIREKHLWFGKESKLDHGHRGAMFTPVANDNTEWMHHWYMFCWAGSKNRLKRQIKEKLIFIIKFMITEFGLFLMIDYTQCYIAWMWAYTGIACYIDWEKCLKHDLTTTDLGCCVYRLFKWYEVRHRAPPQVNTRLPWSQIPMVAIQCNIVDECKEQWHFSYKASFVVEYLCPGCCTNGNRWQWYQVKETPFMYAFAASIFGFHHENLVVFITGSVTIPNGLFGCIAWTSPKPVQKTPASANTIIAYDKCILMG"

r="MEANLY"
c="PLEASANTLY"

rr=r[::-1]
rc=c[::-1]
ro=5

STARTCOLS= [[0]*len(r)]*2
SINKCOLS = [[0]*len(r)]*2

print middleNode(r, c, rr, rc, ro, 0, len(r), 0, len (c))

(b, row, col, matrix) =  globalAlignmentGraph(r, c, ro)
print b
